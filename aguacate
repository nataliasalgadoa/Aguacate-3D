<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Aguacate y Sus Derivados Innovadores</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tween.js/18.6.4/tween.umd.js"></script>
    <style>
        body {
            margin: 0;
            font-family: Arial, sans-serif;
            overflow-x: hidden;
            background-color: #f8fff8;
        }
        #canvas-container {
            width: 100%;
            height: 70vh;
            position: relative;
        }
        .title {
            text-align: center;
            color: #2c7744;
            padding: 20px 0;
            margin: 0;
            background-color: #e8f5e9;
            font-size: 24px;
        }
        .instructions {
            text-align: center;
            padding: 10px;
            background-color: #f0f8f0;
            margin: 0;
            font-style: italic;
            color: #555;
        }
        .controls {
            display: flex;
            justify-content: center;
            gap: 10px;
            padding: 10px;
            background-color: #e8f5e9;
        }
        .control-btn {
            padding: 8px 15px;
            background-color: #2c7744;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        .control-btn:hover {
            background-color: #3d9255;
        }
        .info-panel {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            width: 80%;
            max-width: 600px;
            background: rgba(255, 255, 255, 0.9);
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            z-index: 100;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        .info-panel h3 {
            color: #2c7744;
            margin-top: 0;
            text-align: center;
        }
        .info-content {
            display: flex;
            width: 100%;
            align-items: center;
            gap: 15px;
        }
        .info-img {
            width: 40%;
            max-width: 200px;
            border-radius: 8px;
            overflow: hidden;
        }
        .info-img img {
            width: 100%;
            height: auto;
            display: block;
        }
        .info-text {
            width: 60%;
        }
        .close-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            background: none;
            border: none;
            color: #2c7744;
            font-size: 18px;
            cursor: pointer;
        }
        .tooltip {
            position: absolute;
            background-color: rgba(44, 119, 68, 0.8);
            color: white;
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 14px;
            pointer-events: none;
            transform: translate(-50%, -110%);
            z-index: 10;
            opacity: 0;
            transition: opacity 0.3s;
        }
        .part-btn {
            position: absolute;
            bottom: 20px;
            left: 20px;
            background-color: #2c7744;
            color: white;
            padding: 8px 12px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            z-index: 10;
        }
        .progress-container {
            position: absolute;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            width: 200px;
            background: rgba(255, 255, 255, 0.7);
            border-radius: 10px;
            padding: 5px;
            display: flex;
            justify-content: center;
            gap: 10px;
            z-index: 10;
        }
        .progress-dot {
            width: 15px;
            height: 15px;
            border-radius: 50%;
            background-color: #ccc;
            cursor: pointer;
        }
        .progress-dot.active {
            background-color: #2c7744;
        }
    </style>
</head>
<body>
    <h1 class="title">Aguacate y Sus Productos Innovadores</h1>
    <p class="instructions">Gira el aguacate con el mouse. Haz clic en las partes para ver sus productos derivados.</p>
    
    <div class="controls">
        <button id="show-cascara" class="control-btn">Cáscara</button>
        <button id="show-pulpa" class="control-btn">Pulpa</button>
        <button id="show-semilla" class="control-btn">Semilla</button>
        <button id="show-all" class="control-btn">Aguacate Completo</button>
    </div>
    
    <div id="canvas-container">
        <div id="tooltip" class="tooltip"></div>
        <div class="progress-container" id="progress-container"></div>
    </div>
    
    <div id="info-panel" class="info-panel" style="display: none;">
        <button class="close-btn" id="close-info">×</button>
        <h3 id="info-title">Título del Producto</h3>
        <div class="info-content">
            <div class="info-img" id="info-img">
                <img src="/api/placeholder/200/200" alt="Producto">
            </div>
            <div class="info-text">
                <p id="info-description">Descripción del producto.</p>
            </div>
        </div>
    </div>

    <script>
        // Configuración inicial
        const container = document.getElementById('canvas-container');
        const width = container.clientWidth;
        const height = container.clientHeight;
        
        // Escena, cámara y renderizador
        const scene = new THREE.Scene();
        scene.background = new THREE.Color(0xf8fff8);
        
        const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);
        camera.position.z = 6;
        
        const renderer = new THREE.WebGLRenderer({ antialias: true });
        renderer.setSize(width, height);
        container.appendChild(renderer.domElement);
        
        // Iluminación
        const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
        scene.add(ambientLight);
        
        const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
        directionalLight.position.set(5, 5, 5);
        scene.add(directionalLight);
        
        const directionalLight2 = new THREE.DirectionalLight(0xffffff, 0.5);
        directionalLight2.position.set(-5, -5, -5);
        scene.add(directionalLight2);
        
        // Grupo principal para el aguacate
        const avocadoGroup = new THREE.Group();
        scene.add(avocadoGroup);
        
        // Variables para las partes del aguacate
        let cascaraMesh, pulpaMesh, semillaMesh;
        let arrowHelpers = [];
        let currentPart = null;
        let currentStep = 0;
        let isAnimating = false;
        
        // Crear partes del aguacate
        function createAvocado() {
            // Cáscara del aguacate
            const cascaraGeometry = new THREE.SphereGeometry(2, 32, 32);
            cascaraGeometry.scale(1, 1.5, 0.8);
            const cascaraMaterial = new THREE.MeshStandardMaterial({ 
                color: 0x2c7744,
                roughness: 0.8,
                metalness: 0.1
            });
            cascaraMesh = new THREE.Mesh(cascaraGeometry, cascaraMaterial);
            cascaraMesh.name = 'cascara';
            cascaraMesh.userData.part = 'cascara';
            avocadoGroup.add(cascaraMesh);
            
            // Pulpa del aguacate
            const pulpaGeometry = new THREE.SphereGeometry(1.8, 32, 32);
            pulpaGeometry.scale(1, 1.5, 0.7);
            const pulpaMaterial = new THREE.MeshStandardMaterial({ 
                color: 0xe8da94,
                roughness: 0.6,
                metalness: 0.1
            });
            pulpaMesh = new THREE.Mesh(pulpaGeometry, pulpaMaterial);
            pulpaMesh.name = 'pulpa';
            pulpaMesh.userData.part = 'pulpa';
            pulpaMesh.visible = false;
            avocadoGroup.add(pulpaMesh);
            
            // Semilla del aguacate
            const semillaGeometry = new THREE.SphereGeometry(0.8, 32, 32);
            const semillaMaterial = new THREE.MeshStandardMaterial({ 
                color: 0x8B4513,
                roughness: 0.7,
                metalness: 0.1
            });
            semillaMesh = new THREE.Mesh(semillaGeometry, semillaMaterial);
            semillaMesh.name = 'semilla';
            semillaMesh.userData.part = 'semilla';
            semillaMesh.visible = false;
            avocadoGroup.add(semillaMesh);
        }
        
        // Crear aguacate
        createAvocado();
        
        // Datos de productos por parte
        const productosData = {
            cascara: [
                {
                    id: 'empaques',
                    title: 'Empaques Biodegradables',
                    description: 'Empaques biodegradables hechos a partir de los residuos de la cáscara de aguacate, una alternativa sostenible al plástico con propiedades antibacterianas naturales.',
                    position: new THREE.Vector3(-2.5, 0.5, 0),
                    imageSrc: '/api/placeholder/200/200'
                },
                {
                    id: 'construccion',
                    title: 'Construcción Ecológica',
                    description: 'Materiales de construcción ecológicos que utilizan cáscaras de aguacate procesadas para crear paneles aislantes y elementos decorativos de bajo impacto ambiental.',
                    position: new THREE.Vector3(2.5, 0.5, 0),
                    imageSrc: '/api/placeholder/200/200'
                }
            ],
            pulpa: [
                {
                    id: 'guacamole',
                    title: 'Guacamole Gourmet',
                    description: 'Guacamole premium con recetas artesanales que resaltan el sabor natural del aguacate combinado con ingredientes selectos.',
                    position: new THREE.Vector3(-1.5, -1, 1),
                    imageSrc: '/api/placeholder/200/200'
                },
                {
                    id: 'aceite',
                    title: 'Aceite de Aguacate',
                    description: 'Aceite prensado en frío con alto punto de humeo, ideal para cocinar y para uso cosmético por sus propiedades antioxidantes.',
                    position: new THREE.Vector3(0, 2, 1),
                    imageSrc: '/api/placeholder/200/200'
                },
                {
                    id: 'cremas',
                    title: 'Cremas de Aguacate',
                    description: 'Productos cosméticos que aprovechan las propiedades hidratantes y nutritivas del aguacate para el cuidado de la piel y el cabello.',
                    position: new THREE.Vector3(1.5, -1, 1),
                    imageSrc: '/api/placeholder/200/200'
                },
                {
                    id: 'bateria',
                    title: 'Baterías Orgánicas',
                    description: 'Innovación experimental: La pulpa del aguacate contiene compuestos que podrían usarse como componentes para baterías orgánicas de bajo impacto ambiental.',
                    position: new THREE.Vector3(2, 0.5, 1),
                    imageSrc: '/api/placeholder/200/200'
                }
            ],
            semilla: [
                {
                    id: 'tintes',
                    title: 'Tintes Naturales',
                    description: 'La semilla produce un tinte rojizo-marrón natural que puede usarse en textiles y productos artesanales sostenibles.',
                    position: new THREE.Vector3(-1, 0, 1.5),
                    imageSrc: '/api/placeholder/200/200'
                },
                {
                    id: 'antioxidantes',
                    title: 'Extractos Antioxidantes',
                    description: 'Compuestos bioactivos extraídos de la semilla con potenciales propiedades antioxidantes para uso en suplementos y cosmética.',
                    position: new THREE.Vector3(1, 0, 1.5),
                    imageSrc: '/api/placeholder/200/200'
                },
                {
                    id: 'exfoliante',
                    title: 'Exfoliante Natural',
                    description: 'La semilla triturada se utiliza como ingrediente en exfoliantes corporales naturales que eliminan células muertas y estimulan la circulación.',
                    position: new THREE.Vector3(0, -1.5, 1.5),
                    imageSrc: '/api/placeholder/200/200'
                }
            ]
        };
        
        // Función para mostrar flechas de productos
        function showArrows(part) {
            // Limpiar flechas anteriores
            clearArrows();
            
            if (!productosData[part]) return;
            
            // Crear puntos de progreso
            createProgressDots(productosData[part].length);
            
            // Para cada producto de esta parte
            productosData[part].forEach((producto, index) => {
                // Crear la flecha
                const direction = producto.position.clone().normalize();
                const origin = new THREE.Vector3(0, 0, 0);
                
                // Ajustar origen según la parte
                if (part === 'cascara') {
                    origin.copy(cascaraMesh.position.clone().add(direction.clone().multiplyScalar(1.9)));
                } else if (part === 'pulpa') {
                    origin.copy(pulpaMesh.position.clone().add(direction.clone().multiplyScalar(1.7)));
                } else if (part === 'semilla') {
                    origin.copy(semillaMesh.position.clone().add(direction.clone().multiplyScalar(0.8)));
                }
                
                const length = 2;
                const arrowHelper = new THREE.ArrowHelper(
                    direction, 
                    origin,
                    length,
                    0xff0000,
                    0.3,
                    0.2
                );
                arrowHelper.userData = {
                    producto: producto,
                    index: index
                };
                arrowHelper.visible = false; // Inicialmente oculta
                
                arrowHelpers.push(arrowHelper);
                scene.add(arrowHelper);
            });
            
            // Mostrar la primera flecha si hay alguna
            if (arrowHelpers.length > 0) {
                currentStep = 0;
                updateProgressIndicator();
                showArrowWithAnimation(0);
            }
        }
        
        // Mostrar flechas secuencialmente con animación
        function showArrowWithAnimation(index) {
            if (index >= arrowHelpers.length) return;
            
            const arrowHelper = arrowHelpers[index];
            arrowHelper.visible = true;
            
            // Escalar la flecha con animación
            const initialScale = { value: 0 };
            const targetScale = { value: 1 };
            
            new TWEEN.Tween(initialScale)
                .to(targetScale, 500)
                .easing(TWEEN.Easing.Elastic.Out)
                .onUpdate(() => {
                    arrowHelper.scale.set(initialScale.value, initialScale.value, initialScale.value);
                })
                .start();
        }
        
        // Limpiar flechas
        function clearArrows() {
            arrowHelpers.forEach(arrow => {
                scene.remove(arrow);
            });
            arrowHelpers = [];
            
            // Limpiar puntos de progreso
            const progressContainer = document.getElementById('progress-container');
            progressContainer.innerHTML = '';
        }
        
        // Crear indicadores de progreso
        function createProgressDots(count) {
            const progressContainer = document.getElementById('progress-container');
            progressContainer.innerHTML = '';
            
            for (let i = 0; i < count; i++) {
                const dot = document.createElement('div');
                dot.className = 'progress-dot';
                if (i === 0) dot.classList.add('active');
                
                // Añadir evento de clic
                dot.addEventListener('click', () => {
                    // Mostrar la flecha correspondiente
                    currentStep = i;
                    updateProgressIndicator();
                    showProductInfo(arrowHelpers[i].userData.producto);
                });
                
                progressContainer.appendChild(dot);
            }
        }
        
        // Actualizar indicador de progreso
        function updateProgressIndicator() {
            const dots = document.querySelectorAll('.progress-dot');
            dots.forEach((dot, i) => {
                if (i === currentStep) {
                    dot.classList.add('active');
                } else {
                    dot.classList.remove('active');
                }
            });
        }
        
        // Mostrar información del producto
        function showProductInfo(producto) {
            const panel = document.getElementById('info-panel');
            const title = document.getElementById('info-title');
            const img = document.getElementById('info-img');
            const description = document.getElementById('info-description');
            
            title.textContent = producto.title;
            img.innerHTML = `<img src="${producto.imageSrc}" alt="${producto.title}">`;
            description.textContent = producto.description;
            
            panel.style.display = 'block';
        }
        
        // Cerrar panel de información
        document.getElementById('close-info').addEventListener('click', () => {
            document.getElementById('info-panel').style.display = 'none';
        });
        
        // Control de rotación
        let isDragging = false;
        let previousMousePosition = { x: 0, y: 0 };
        
        renderer.domElement.addEventListener('mousedown', (e) => {
            isDragging = true;
            previousMousePosition = {
                x: e.offsetX,
                y: e.offsetY
            };
            e.preventDefault();
        });
        
        renderer.domElement.addEventListener('mousemove', (e) => {
            const tooltip = document.getElementById('tooltip');
            
            // Mostrar información al pasar el mouse sobre una flecha
            if (arrowHelpers.length > 0) {
                const raycaster = new THREE.Raycaster();
                const mouse = new THREE.Vector2(
                    (e.offsetX / width) * 2 - 1,
                    -(e.offsetY / height) * 2 + 1
                );
                
                raycaster.setFromCamera(mouse, camera);
                const intersects = raycaster.intersectObjects(arrowHelpers, true);
                
                if (intersects.length > 0) {
                    const intersectedArrow = intersects[0].object.parent;
                    if (intersectedArrow && intersectedArrow.userData && intersectedArrow.userData.producto) {
                        tooltip.textContent = intersectedArrow.userData.producto.title;
                        tooltip.style.left = e.offsetX + 'px';
                        tooltip.style.top = e.offsetY + 'px';
                        tooltip.style.opacity = 1;
                    }
                } else {
                    tooltip.style.opacity = 0;
                }
            }
            
            // Rotación al arrastrar
            if (isDragging) {
                const deltaMove = {
                    x: e.offsetX - previousMousePosition.x,
                    y: e.offsetY - previousMousePosition.y
                };
                
                avocadoGroup.rotation.y += deltaMove.x * 0.01;
                avocadoGroup.rotation.x += deltaMove.y * 0.01;
                
                previousMousePosition = {
                    x: e.offsetX,
                    y: e.offsetY
                };
            }
        });
        
        renderer.domElement.addEventListener('mouseup', (e) => {
            isDragging = false;
            
            // Detectar clics en flechas
            if (!isAnimating) {
                const raycaster = new THREE.Raycaster();
                const mouse = new THREE.Vector2(
                    (e.offsetX / width) * 2 - 1,
                    -(e.offsetY / height) * 2 + 1
                );
                
                raycaster.setFromCamera(mouse, camera);
                
                // Verificar intersección con flechas
                const arrowIntersects = raycaster.intersectObjects(arrowHelpers, true);
                if (arrowIntersects.length > 0) {
                    const intersectedArrow = arrowIntersects[0].object.parent;
                    if (intersectedArrow && intersectedArrow.userData && intersectedArrow.userData.producto) {
                        // Actualizar paso actual
                        currentStep = intersectedArrow.userData.index;
                        updateProgressIndicator();
                        showProductInfo(intersectedArrow.userData.producto);
                    }
                    return;
                }
                
                // Verificar intersección con partes del aguacate
                const partsToCheck = [cascaraMesh, pulpaMesh, semillaMesh].filter(mesh => mesh.visible);
                const partIntersects = raycaster.intersectObjects(partsToCheck);
                
                if (partIntersects.length > 0) {
                    const part = partIntersects[0].object.userData.part;
                    showPart(part);
                }
            }
        });
        
        renderer.domElement.addEventListener('mouseleave', () => {
            isDragging = false;
            document.getElementById('tooltip').style.opacity = 0;
        });
        
        // Función para mostrar una parte específica
        function showPart(part) {
            isAnimating = true;
            currentPart = part;
            
            // Resetear visibilidad
            cascaraMesh.visible = false;
            pulpaMesh.visible = false;
            semillaMesh.visible = false;
            
            // Configurar visibilidad según la parte
            if (part === 'cascara') {
                cascaraMesh.visible = true;
            } else if (part === 'pulpa') {
                pulpaMesh.visible = true;
            } else if (part === 'semilla') {
                semillaMesh.visible = true;
            } else if (part === 'all') {
                // Mostrar aguacate completo en capas
                const showCascara = () => {
                    cascaraMesh.visible = true;
                    cascaraMesh.material.transparent = true;
                    cascaraMesh.material.opacity = 0;
                    
                    new TWEEN.Tween({ opacity: 0 })
                        .to({ opacity: 0.6 }, 500)
                        .onUpdate(o => cascaraMesh.material.opacity = o.opacity)
                        .onComplete(() => {
                            // Mostrar pulpa después
                            setTimeout(showPulpa, 300);
                        })
                        .start();
                };
                
                const showPulpa = () => {
                    pulpaMesh.visible = true;
                    pulpaMesh.material.transparent = true;
                    pulpaMesh.material.opacity = 0;
                    
                    new TWEEN.Tween({ opacity: 0 })
                        .to({ opacity: 0.8 }, 500)
                        .onUpdate(o => pulpaMesh.material.opacity = o.opacity)
                        .onComplete(() => {
                            // Mostrar semilla después
                            setTimeout(showSemilla, 300);
                        })
                        .start();
                };
                
                const showSemilla = () => {
                    semillaMesh.visible = true;
                    semillaMesh.material.transparent = true;
                    semillaMesh.material.opacity = 0;
                    
                    new TWEEN.Tween({ opacity: 0 })
                        .to({ opacity: 1 }, 500)
                        .onUpdate(o => semillaMesh.material.opacity = o.opacity)
                        .onComplete(() => {
                            // Finalizar animación
                            cascaraMesh.material.transparent = false;
                            cascaraMesh.material.opacity = 1;
                            pulpaMesh.material.transparent = false;
                            pulpaMesh.material.opacity = 1;
                            semillaMesh.material.transparent = false;
                            semillaMesh.material.opacity = 1;
                            isAnimating = false;
                        })
                        .start();
                };
                
                // Iniciar secuencia
                showCascara();
                return;
            }
            
            // Animar la aparición
            const targetMesh = (part === 'cascara') ? cascaraMesh : 
                              (part === 'pulpa') ? pulpaMesh : semillaMesh;
            
            targetMesh.scale.set(0.01, 0.01, 0.01);
            
            new TWEEN.Tween({ scale: 0.01 })
                .to({ scale: 1 }, 800)
                .easing(TWEEN.Easing.Elastic.Out)
                .onUpdate(obj => {
                    targetMesh.scale.set(obj.scale, obj.scale, obj.scale);
                })
                .onComplete(() => {
                    isAnimating = false;
                    showArrows(part);
                })
                .start();
        }
        
        // Botones de control
        document.getElementById('show-cascara').addEventListener('click', () => {
            clearArrows();
            showPart('cascara');
        });
        
        document.getElementById('show-pulpa').addEventListener('click', () => {
            clearArrows();
            showPart('pulpa');
        });
        
        document.getElementById('show-semilla').addEventListener('click', () => {
            clearArrows();
            showPart('semilla');
        });
        
        document.getElementById('show-all').addEventListener('click', () => {
            clearArrows();
            showPart('all');
        });
        
        // Función de animación
        function animate(time) {
            requestAnimationFrame(animate);
            
            // Actualizar animaciones Tween
            TWEEN.update(time);
            
            // Animación de rotación suave
            if (!isDragging && !isAnimating) {
                avocadoGroup.rotation.y += 0.002;
            }
            
            renderer.render(scene, camera);
        }
        
        // Responsive
        window.addEventListener('resize', () => {
            const newWidth = container.clientWidth;
            const newHeight = container.clientHeight;
            
            camera.aspect = newWidth / newHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(newWidth, newHeight);
        });
        
        // Iniciar todo
        animate();
        
        // Mostrar aguacate completo al inicio
        setTimeout(() => {
            showPart('all');
        }, 500);
    </script>
</body>
</html>
